Programaci√≥n Java/GO

Bootcamp Backend CodeReview N¬∫ 1

üèÅIntroducci√≥n


La fase de desarrollo no culmina simplemente con la escritura de c√≥digo. Es por eso que adem√°s del sprint, sumamos esta instancia de code review como parte de tu proceso global de aprendizaje.


ü§î¬øEn qu√© consiste este "CodeReview Day"?

Es un espacio de 10 a 15 minutos de duraci√≥n, en el que te vas a encontrar por meet con uno de los facilitadores del Bootcamp para discutir y presentar una soluci√≥n a uno de los ejercicios propuestos sobre una concesionaria de autos; que se detallan m√°s abajo.

Durante este proceso, no solo tendr√°s que dar una soluci√≥n al problema, sino tambi√©n explicarla, justificar tus decisiones y responder a preguntas t√©cnicas o conceptuales que puedan surgir.

üéØEl objetivo de esta instancia es doble:

Permitirte demostrar tu capacidad t√©cnica y tu comprensi√≥n de los conceptos aprendidos.
Darte una idea aproximada e hipot√©tica de c√≥mo se realizan las revisiones de c√≥digo en entornos profesionales reales, prepar√°ndote para situaciones similares en el mundo laboral.

üß©Planteo del problema

Est√°s a cargo de desarrollar una API para una concesionaria de veh√≠culos. Cada veh√≠culoüöó en la concesionaria posee detalles √∫nicos como:
identificador
marca
modelo
matr√≠cula
color
a√±o de fabricaci√≥n
velocidad m√°xima
capacidad de personas

tipo de combustible
tipo de transmisi√≥n
dimensiones: largo y ancho
peso

Para facilitar tu trabajo, ya cuentas con un proyecto base. En este, se ha preestablecido la estructura de datos y el almacenamiento correspondiente. Adem√°s, ya se ha codificado el endpoint para listar todos los veh√≠culos.

Listar todos los veh√≠culos

Como: Usuario de la API.
Quiero: Obtener una lista de todos los veh√≠culos.
Para: Visualizar el inventario completo.
Endpoint: GET /vehicles
Respuestas:
200 OK: Devuelve una lista con todos los veh√≠culos.
404 Not Found: No hay veh√≠culos en la concesionaria.

Tu tarea principal es mejorar y expandir esta API para que gestione eficientemente toda la informaci√≥n de los veh√≠culos.

A continuaci√≥n, te presento una lista de los endpoints que podr√≠as implementar:

1. A√±adir un veh√≠culo

Como: Usuario de la API.
Quiero: Registrar un nuevo veh√≠culo.
Para: Ampliar el inventario de la concesionaria.
Endpoint: POST /vehicles
Respuestas:
201 Created: Veh√≠culo creado exitosamente.
400 Bad Request: Datos del veh√≠culo mal formados o incompletos.
409 Conflict: Identificador del veh√≠culo ya existente.

2. Buscar veh√≠culos por color y a√±o

Como: Usuario de la API.
Quiero: Listar veh√≠culos por color y a√±o.
Para: Filtrar veh√≠culos basados en esas especificaciones.
Endpoint: GET /vehicles/color/{color}/year/{year}
Respuestas:
200 OK: Devuelve una lista de veh√≠culos que cumplen con los criterios.
404 Not Found: No se encontraron veh√≠culos con esos criterios.

3. Buscar veh√≠culos por marca y rango de a√±os

Como: Usuario de la API.
Quiero: Listar veh√≠culos de una marca espec√≠fica fabricados en un rango de a√±os.
Para: Realizar b√∫squedas m√°s detalladas en el inventario.
Endpoint: GET /vehicles/brand/{brand}/between/{start_year}/{end_year}
Respuestas:
200 OK: Devuelve una lista de veh√≠culos que cumplen con los criterios.
404 Not Found: No se encontraron veh√≠culos con esos criterios.

4. Consultar velocidad promedio por marca

Como: Usuario de la API.
Quiero: Conocer la velocidad promedio de veh√≠culos de una marca espec√≠fica.
Para: Comparar las prestaciones de diferentes marcas.
Endpoint: GET /vehicles/average_speed/brand/{brand}
Respuestas:
200 OK: Devuelve la velocidad promedio de la marca.
404 Not Found: No se encontraron veh√≠culos de esa marca.

5. A√±adir m√∫ltiples veh√≠culos

Como: Usuario de la API.
Quiero: Registrar varios veh√≠culos al mismo tiempo.
Para: Facilitar la carga masiva de datos en el inventario.
Endpoint: POST /vehicles/batch
Respuestas:
201 Created: Veh√≠culos creados exitosamente.
400 Bad Request: Datos de alg√∫n veh√≠culo mal formados o incompletos.
409 Conflict: Alg√∫n veh√≠culo tiene un identificador ya existente.

6. Actualizar velocidad m√°xima de un veh√≠culo

Como: Usuario de la API.
Quiero: Modificar la velocidad m√°xima de un veh√≠culo espec√≠fico.
Para: Mantener el inventario actualizado con las caracter√≠sticas correctas.
Endpoint: PUT /vehicles/{id}/update_speed
Respuestas:
200 OK: Velocidad del veh√≠culo actualizada exitosamente.
400 Bad Request: Velocidad mal formada o fuera de rango.
404 Not Found: No se encontr√≥ el veh√≠culo.

7. Listar veh√≠culos por tipo de combustible

Como: Usuario de la API.
Quiero: Obtener una lista de veh√≠culos seg√∫n el tipo de combustible.
Para: Realizar b√∫squedas basadas en la fuente de energ√≠a del veh√≠culo.
Endpoint: GET /vehicles/fuel_type/{type}
Respuestas:
200 OK: Devuelve una lista de veh√≠culos que usan ese tipo de combustible.
404 Not Found: No se encontraron veh√≠culos con ese tipo de combustible.

8. Eliminar un veh√≠culo

Como: Usuario de la API.
Quiero: Borrar un veh√≠culo de la concesionaria.
Para: Mantener el inventario actualizado.
Endpoint: DELETE /vehicles/{id}
Respuestas:
204 No Content: Veh√≠culo eliminado exitosamente.
404 Not Found: No se encontr√≥ el veh√≠culo.

9. Buscar veh√≠culos por tipo de transmisi√≥n

Como: Usuario de la API.
Quiero: Obtener una lista de veh√≠culos basada en su tipo de transmisi√≥n (manual, autom√°tica, etc.).
Para: Filtrar veh√≠culos seg√∫n mis preferencias de conducci√≥n.
Endpoint: GET /vehicles/transmission/{type}
Respuestas:
200 OK: Devuelve una lista de veh√≠culos con ese tipo de transmisi√≥n.
404 Not Found: No se encontraron veh√≠culos con ese tipo de transmisi√≥n.

10. Actualizar el tipo de combustible de un veh√≠culo

Como: Usuario de la API.
Quiero: Modificar el tipo de combustible de un veh√≠culo espec√≠fico.
Para: Mantener el inventario actualizado ante cambios en las caracter√≠sticas del veh√≠culo.
Endpoint: PUT /vehicles/{id}/update_fuel
Respuestas:
200 OK: Tipo de combustible del veh√≠culo actualizado exitosamente.
400 Bad Request: Tipo de combustible mal formado o no admitido.
404 Not Found: No se encontr√≥ el veh√≠culo.

11. Obtener la capacidad promedio de personas por marca

Como: Usuario de la API.
Quiero: Conocer la capacidad promedio de personas de los veh√≠culos de una marca espec√≠fica.
Para: Comparar la capacidad de diferentes marcas y decidir una compra.
Endpoint: GET /vehicles/average_capacity/brand/{brand}
Respuestas:
200 OK: Devuelve la capacidad promedio de personas de la marca.
404 Not Found: No se encontraron veh√≠culos de esa marca.

12. Buscar veh√≠culos por dimensiones

Como: Usuario de la API.
Quiero: Listar veh√≠culos basados en un rango de dimensiones (largo, ancho).
Para: Encontrar veh√≠culos que se adapten a mis necesidades de espacio.
Endpoint: GET /vehicles/dimensions?length={min_length}-{max_length}&width={min_width}-{max_width}
Respuestas:
200 OK: Devuelve una lista de veh√≠culos que cumplen con los criterios de dimensiones.
404 Not Found: No se encontraron veh√≠culos con esas dimensiones.

13. Listar veh√≠culos por rango de peso

Como: Usuario de la API.
Quiero: Listar veh√≠culos basados en un rango de peso.
Para: Encontrar veh√≠culos que cumplan con mis requisitos de carga o preferencias.
Endpoint: GET /vehicles/weight?min={weight_min}&max={weight_max}
Respuestas:
200 OK: Devuelve una lista de veh√≠culos que est√°n en el rango de peso especificado.
404 Not Found: No se encontraron veh√≠culos en ese rango de peso.

Gu√≠a de trabajo

Para concluir, te ofrecemos algunas pautas que te ayudar√°n a prepararte de la mejor manera para el d√≠a de tu encuentro con los facilitadores. Estas recomendaciones podr√≠an ser de gran utilidad para ti. ¬°Aprov√©chalas!

¬øQu√© esperamos que aprendas de esta instancia?ü§ì


Recordar (Conocer): Identificar y describir los componentes b√°sicos de una API, tales como endpoints, handlers y queries, y reconocer la estructura est√°ndar de un proyecto de software.
Comprender: Explicar la importancia de las convenciones de c√≥digo y el papel que desempe√±an en la mantenibilidad y legibilidad del software. Adem√°s, interpretar las solicitudes del usuario y traducirlas en funcionalidades t√©cnicas.
Aplicar: Implementar endpoints espec√≠ficos en la API basados en los ejercicios proporcionados, utilizando t√©cnicas adecuadas de filtrado y ordenaci√≥n en el repositorio.
Analizar: Diferenciar entre un c√≥digo bien estructurado y uno que necesita mejoras, examinando la l√≥gica de negocio, las queries y la seguridad de los endpoints.
Evaluar: Justificar decisiones tomadas durante el desarrollo, considerando eficiencia, seguridad y usabilidad. Adem√°s, revisar y evaluar el c√≥digo de pares para identificar √°reas de mejora o refactoring.

Algunas recomendaciones:üìù


Antes de la entrevista, repasa los ejercicios y aseg√∫rate de entender cada problema y posibles soluciones.
Prep√°rate para justificar y explicar tus decisiones.
Mantente abierto a feedback. El proceso no solo es evaluativo sino tambi√©n formativo; se trata de aprender y mejorar.

